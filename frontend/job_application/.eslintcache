[{"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/index.js":"1","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/App.js":"2","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reportWebVitals.js":"3","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/store.js":"4","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/index.js":"5","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/errorReducer.js":"6","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/types.js":"7","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/authReducer.js":"8","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/authActions.js":"9","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/errorActions.js":"10","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/AppNavbar.js":"11","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/register.js":"12","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/logout.js":"13","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/loginModal.js":"14","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/landingPage.js":"15","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterVisit.js":"16","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/applicantVisit.js":"17","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/applicantReducer.js":"18","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/applicantEdit.js":"19","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/applicantActions.js":"20","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/addJob.js":"21","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/viewJob.js":"22","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/editJobModal.js":"23","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/addSopApply.js":"24","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/myApplications.js":"25","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterApplicationView.js":"26","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterEmployees.js":"27"},{"size":478,"mtime":1610291630075,"results":"28","hashOfConfig":"29"},{"size":1719,"mtime":1611646618675,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1610291094998,"results":"31","hashOfConfig":"29"},{"size":402,"mtime":1610291712954,"results":"32","hashOfConfig":"29"},{"size":305,"mtime":1610430180513,"results":"33","hashOfConfig":"29"},{"size":614,"mtime":1610292925250,"results":"34","hashOfConfig":"29"},{"size":826,"mtime":1610528046704,"results":"35","hashOfConfig":"29"},{"size":2022,"mtime":1610561300294,"results":"36","hashOfConfig":"29"},{"size":2168,"mtime":1610443483730,"results":"37","hashOfConfig":"29"},{"size":277,"mtime":1610296334033,"results":"38","hashOfConfig":"29"},{"size":2528,"mtime":1610441870621,"results":"39","hashOfConfig":"29"},{"size":5177,"mtime":1610714911476,"results":"40","hashOfConfig":"29"},{"size":551,"mtime":1610516791583,"results":"41","hashOfConfig":"29"},{"size":3432,"mtime":1610395299709,"results":"42","hashOfConfig":"29"},{"size":924,"mtime":1610427314153,"results":"43","hashOfConfig":"29"},{"size":4643,"mtime":1611647043538,"results":"44","hashOfConfig":"29"},{"size":19237,"mtime":1611670732897,"results":"45","hashOfConfig":"29"},{"size":1439,"mtime":1610529788817,"results":"46","hashOfConfig":"29"},{"size":6712,"mtime":1610530704601,"results":"47","hashOfConfig":"29"},{"size":2052,"mtime":1610530367298,"results":"48","hashOfConfig":"29"},{"size":6074,"mtime":1610776919569,"results":"49","hashOfConfig":"29"},{"size":6349,"mtime":1611673975996,"results":"50","hashOfConfig":"29"},{"size":3765,"mtime":1611126781528,"results":"51","hashOfConfig":"29"},{"size":6997,"mtime":1611522095294,"results":"52","hashOfConfig":"29"},{"size":5146,"mtime":1611668223631,"results":"53","hashOfConfig":"29"},{"size":15118,"mtime":1611647086347,"results":"54","hashOfConfig":"29"},{"size":6860,"mtime":1611667825944,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"5eunxj",{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"58"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/index.js",[],["124","125"],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/App.js",["126"],"import './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { loadUser } from './actions/authActions'\nimport { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport AppNavbar from './components/AppNavbar'\nimport LandingPage from './components/screens/landingPage'\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport ApplicantEdit from './components/screens/applicantEdit'\nimport AddJob from './components/screens/addJob'\nimport ViewJobs from './components/screens/viewJob'\nimport AddSopApply from './components/screens/addSopApply'\nimport MyApplication from './components/screens/myApplications'\nimport RecruiterApplicationView from './components/screens/recruiterApplicationView'\nimport RecruiterEmployees from './components/screens/recruiterEmployees'\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser());\n  }\n\n  render() {\n    return (\n      <Router>\n        <Provider store = { store }>\n          <div className=\"app\">\n              <Route path=\"/\" component={LandingPage}/>\n              <Route path=\"/applicantEdit\" component={ApplicantEdit}/>\n              <Route path=\"/addJob\" component={AddJob}/>\n              <Route path=\"/viewJob\" component={ViewJobs}/>\n              <Route path=\"/applyJob\" component={AddSopApply}/>\n              <Route path=\"/myApplication\" component={MyApplication}/>\n              <Route path=\"/recruiterApplication\" component={RecruiterApplicationView}></Route>\n              <Route path=\"/recruiterEmployees\" component={RecruiterEmployees}></Route>\n            <AppNavbar/>\n          </div>\n        </Provider>\n      </Router>\n    );\n  }\n}\n\nexport default App;","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reportWebVitals.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/store.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/index.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/errorReducer.js",["127"],"import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types'\n\nconst initialState = {\n    msg: {},\n    status: null,\n    id: null\n}\n\nexport default function ( state = initialState, action){\n    switch(action.type){\n        case GET_ERRORS:\n            return {\n                msg: action.payload.msg,\n                status: action.payload.status,\n                id: action.payload.id\n            }\n        case CLEAR_ERRORS: {\n            return{\n                msg: {},\n                status: null,\n                id: null\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/types.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/authReducer.js",["128"],"import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types'\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n    role: localStorage.getItem('role'),\n    email: localStorage.getItem('email')\n};\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload,\n                role: action.payload.user!=null ? action.payload.user.role : null,\n                email: action.payload.user!=null ? action.payload.user.email : null \n            }\n        case REGISTER_SUCCESS:\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.token);\n            localStorage.setItem('role', action.payload.user.role);\n            localStorage.setItem('email', action.payload.user.email)\n            localStorage.setItem('name', action.payload.user.name);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n                role: action.payload.user.role,\n                email: action.payload.user.email\n            }\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            localStorage.removeItem('role')\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                role: null,\n                email: null\n            }\n        default:\n            return state;\n    }\n}","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/authActions.js",["129","130"],"import axios from 'axios';\nimport { combineReducers } from 'redux';\nimport { returnErrors } from './errorActions';\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL, \n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({ type: USER_LOADING });\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch ({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n}\n\nexport const register = ({ name, email, password, role }) => dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, email, role, password });\n    axios.post('/api/users', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch( err => {\n            dispatch( returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL') );\n            dispatch({\n                type: REGISTER_FAIL,\n            })\n        })\n}\n\nexport const login = ({ email, password}) => dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ email, password });\n    axios.post('/api/auth', body, config)\n        .then(res => dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        }))\n        .catch( err => {\n            dispatch( returnErrors(err.response.data , err.response.status, 'LOGIN_FAIL') );\n            dispatch({\n                type: LOGIN_FAIL,\n            })\n        })\n}\n\n\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\nexport const tokenConfig = (getState) => {\n    // getting the token\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    // If token then adding to headers\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config\n}\n\n","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/errorActions.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/AppNavbar.js",["131"],"import React, {Component, Fragment} from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\nimport RegisterModal from './auth/register'\nimport Logout from './auth/logout';\nimport LoginModal from './auth/loginModal'\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom'\n\n\nclass AppNavbar extends Component {\n\n    static propTypes = {\n        auth: propTypes.object.isRequired\n    }\n    state = {\n        isOpen: false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n\n    render() {\n        const { isAuthenticated, user, role } = this.props.auth;\n        const authLinks = (\n            <Fragment>\n                <span className=\"navbar-text mr-3\" style={{ color: \"violet\" }}>\n                    <strong>{ user ? `Welcome ${user.name}` : ''}</strong>\n                </span>\n                { role === \"Applicant\" ? \n                <Link to=\"/applicantEdit\">\n                    <span className=\"navbar-text mr-3\" style={{ color: \"violet\" }}>\n                        <strong>Account</strong>\n                    </span>\n                </Link> : null}\n                <NavItem>\n                    <Logout/>\n                </NavItem>\n            </Fragment>\n        )\n\n        const guestLinks = (\n            <Fragment>\n                <NavItem>\n                    <RegisterModal/>\n                </NavItem>\n                <NavItem>\n                    <LoginModal/>\n                </NavItem>\n            </Fragment>\n        )\n\n        return (\n            <div>\n                <Navbar color = \"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <Link to=\"/\">\n                            <NavbarBrand href=\"/\">JOB APPLICATION PORTAL</NavbarBrand>\n                        </Link>\n                        <NavbarToggler onClick={this.toggle}></NavbarToggler>\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                { isAuthenticated ?  authLinks : guestLinks }\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n})\n\nexport default connect( mapStateToProps, null)(AppNavbar)","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/register.js",["132"],"import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {register} from '../../actions/authActions';\nimport { clearErrors } from \"../../actions/errorActions\";\nimport { addApplicantData } from \"../../actions/applicantActions\"\nimport axios from 'axios'\n\nclass RegisterModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        password: '',\n        email: '',\n        role: 'Applicant',\n        msg: null,\n    }\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        register: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired,\n        addApplicantData: PropTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps){\n        const { error } = this.props;\n        if(error !== prevProps.error){\n            if(error.id === 'REGISTER_FAIL'){\n                this.setState({ msg: error.msg.msg });\n            } else {\n                this.setState( {msg: null} );\n            }\n        }\n\n        if(this.state.modal){\n            if(this.props.isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        this.props.clearErrors();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = async (e) => {\n        e.preventDefault()\n        const { name, email, password, role} = this.state;\n        const newUser = {\n            name,\n            email,\n            password,\n            role\n        };\n        this.props.register(newUser);\n        if(role == \"Applicant\"){\n            this.props.addApplicantData(newUser)\n        }\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const body = JSON.stringify({ name, email, contact_number: '', bio: '' } )\n        console.log(`${body}`)\n        await axios.post('/api/recruiterProfile/', body, config)\n            .then( res => ({\n            })   \n            )\n            .catch(err => {\n                console.log(err.response);\n                alert('An error occurred! Try submitting the form again.');\n            });\n    }\n\n    render(){\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href='#'>\n                    Register\n                </NavLink> \n                <Modal\n                    centered = {true}\n                    isOpen = {this.state.modal}\n                    toggle = {this.toggle}>\n                    <ModalHeader toggl={this.toggle}>Register</ModalHeader>\n                    <ModalBody>\n                        { this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null }\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"name\" style={{marginBottom: '0.5rem'}}>\n                                    Name:\n                                </Label>\n                                <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" onChange={this.onChange} style= {{ marginBottom: '1rem' }}>\n                                </Input>\n\n                                <Label for=\"email\" style={{marginBottom: '0.5rem'}}>\n                                    Email:\n                                </Label>\n                                <Input style={{marginBottom: '1rem'}} type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" onChange={this.onChange}>\n                                </Input>\n\n                                <Label for=\"password\" style={{marginBottom: '0.5rem'}}>\n                                    Password:\n                                </Label>\n                                <Input style={{marginBottom: '1rem'}} type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" onChange={this.onChange}>\n                                </Input>\n                                <Label for=\"role\" style={{marginBottom: '0.5rem', marginRight:'1rem'}}>\n                                    Role:\n                                </Label>\n                                <select name=\"role\" onChange={this.onChange} >\n                                    <option value=\"Applicant\" selected >Applicant</option>\n                                    <option value=\"Recruiter\" >Recruiter</option>\n                                </select>\n                                <Button color=\"dark\" style={{marginTop: '2rem'}} block>Register</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n})\n\nexport default connect(mapStateToProps, { register, clearErrors, addApplicantData })(RegisterModal);","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/logout.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/auth/loginModal.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/landingPage.js",["133"],"import { Component } from \"react\";\nimport '../../App.css'\nimport ApplicantVisit from './applicantVisit'\nimport RecruiterVisit from './recruiterVisit'\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\n\nclass LandingPage extends Component {\n\n    static propTypes = {\n        auth: propTypes.object.isRequired\n    }\n    render() {\n        const { isAuthenticated, user, role } = this.props.auth;\n        return (\n            !isAuthenticated ? \n            <div className = \"box\">\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                    <h1 style={{ color:'white'}}>Welcome.</h1>\n                </div>\n            </div> : role === \"Applicant\" ? <ApplicantVisit/> : <RecruiterVisit/>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n})\n\nexport default connect( mapStateToProps, null)(LandingPage)","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterVisit.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/applicantVisit.js",["134","135","136","137","138","139","140","141"],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/reducers/applicantReducer.js",["142"],"import { APPLICANT_DATA_LOADED, APPLICANT_DATA_LOADING, APPLICANT_DATA_POSTING, APPLICANT_DATA_POSTED, APPLICANT_DATA_INITIALISING, APPLICANT_DATA_INITIALISED } from '../actions/types'\n\nconst initialState = {\n    email : localStorage.getItem('email'),\n    isLoading: false,\n    applicantData: null\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case APPLICANT_DATA_LOADING: {\n            return{\n                ...state,\n                isLoading: true\n            }\n        }\n        case APPLICANT_DATA_LOADED: {\n            return{\n                ...state,\n                isLoading: false,\n                applicantData: action.payload\n            }\n        }\n        case APPLICANT_DATA_POSTING: {\n            return{\n                ...state,\n                isLoading: true\n            }\n        }\n        case APPLICANT_DATA_POSTED: {\n            return{\n                ...state,\n                isLoading: false,\n                applicantData: action.payload\n            }\n        }\n        case APPLICANT_DATA_INITIALISING: {\n            return{\n                ...state,\n                isLoading: true\n            }\n        }\n        case APPLICANT_DATA_INITIALISED: {\n            return{\n                ...state,\n                applicantData: action.payload,\n                isLoading: false\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/applicantEdit.js",["143","144"],"import { Component } from \"react\";\nimport '../../App.css';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport { getApplicantData, updateApplicantData } from '../../actions/applicantActions'\nimport { Button, Form, FormGroup, Label, ListGroupItem} from 'reactstrap';\nimport { combineReducers } from \"redux\";\n\nclass ApplicantEdit extends Component {\n\n    // state = {\n    //     name: null,\n    //     email: localStorage.getItem('email'),\n    //     education: null,\n    //     skills: null,\n    // }\n    constructor(props){\n        super(props);\n        this.state = {\n            name: null,\n            email: localStorage.getItem('email'),\n            education: null,\n            skills: null,\n            data: null,\n        }\n    }\n\n    propTypes = {\n        email: propTypes.string,\n        getApplicantData: propTypes.func.isRequired,\n        updateApplicantData: propTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps){\n        const { applicantData } = this.props;\n        if(applicantData !== prevProps.applicantData){\n            this.setState({\n                name: this.props.applicantData.name,\n                email: this.props.applicantData.email,\n                skills: this.props.applicantData.skills,\n                education: this.props.applicantData.education\n            })\n        }\n    }\n\n    componentDidMount(){\n        const user = {\n            email: this.props.email,\n        }\n        this.props.getApplicantData(user);\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    handleSkillListChange = (index, event) => {\n        var skills = this.state.skills.slice(); // Make a copy of the emails first.\n        skills[index] = event.target.value; // Update it with the modified email.\n        this.setState({skills: skills}); // Update the state.\n    }\n\n    handleEducationListChangeFirst = (index, event) => {\n        var education = this.state.education.slice(); // Make a copy of the emails first.\n        education[index][0] = event.target.value; // Update it with the modified email.\n        this.setState({education: education});\n    }\n\n    handleEducationListChangeSec = (index, event) => {\n        var education = this.state.education.slice(); // Make a copy of the emails first.\n        education[index][1] = event.target.value; // Update it with the modified email.\n        this.setState({education: education});\n    }\n    handleEducationListChangeThi = (index, event) => {\n        var education = this.state.education.slice(); // Make a copy of the emails first.\n        education[index][2] = event.target.value; // Update it with the modified email.\n        this.setState({education: education});\n    }\n\n    addNewSkill = () => {\n        this.setState({\n            skills: this.state.skills.concat('')\n        })\n    }\n\n    addNewEducation = () => {\n        this.setState({\n            education: this.state.education.concat([['','','']])\n        })\n    }\n\n    deleteSkill = (name) => {\n        this.setState({\n            skills: this.state.skills.filter(function(person) { \n            return person !== name \n        })});\n    }\n\n    deleteEducation = (name) => {\n        this.setState({\n            education: this.state.education.filter(function(person) { \n            return person !== name \n        })});\n    }\n\n    updateApplicantData = () => {\n        var updatedData = {\n            _id: this.props.applicantData._id,\n            name: this.state.name,\n            skills: this.state.skills,\n            email: this.state.email,\n            education: this.state.education,\n            rating: this.props.applicantData.rating,\n            total_ratings: this.props.applicantData.total_ratings\n        }\n        this.props.updateApplicantData(updatedData)\n    }\n\n    render() {\n        return (\n            <div className = \"box\">\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                    <Form>\n                    <FormGroup>\n                        <Label>Name:</Label>\n                        <h2>{this.state.name}</h2>\n                        <Label>Email:</Label>\n                        <h2>{this.state.email}</h2>\n                        <Label>Skills:</Label>\n                        { this.state.skills != null ? this.state.skills.map((name, index) => (\n                            <div key={index} className=\"input-group\">\n                                <Button className= \"remove-btn\" color=\"danger\" size=\"sm\" onClick = {this.deleteSkill.bind(this, name)}>&times;</Button>\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    onChange={this.handleSkillListChange.bind(this, index)} value={name}/>\n                            </div>\n                        ))\n                        : null}\n                        <Button block onClick={this.addNewSkill}>Add skill</Button>\n                        <Label>Education:</Label>\n                        { this.state.education != null ? this.state.education.map((edu, index) => (\n                            <div key={index} className=\"input-group\">\n                                <Button className= \"remove-btn\" color=\"danger\" size=\"sm\" onClick = {this.deleteEducation.bind(this, edu)}>&times;</Button>\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    onChange={this.handleEducationListChangeFirst.bind(this.target, index)} value={edu[0]}/>\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    onChange={this.handleEducationListChangeSec.bind(this.target, index)} value={edu[1]}/>\n                                <input type=\"text\"\n                                    className=\"form-control\"\n                                    onChange={this.handleEducationListChangeThi.bind(this.target, index)} value={edu[2]}/>\n                            </div>\n                        ))\n                        : null}\n                        <Button block onClick={this.addNewEducation}>Add Education</Button>\n                        <Button block onClick={this.updateApplicantData}>Submit</Button>\n                        </FormGroup>\n                    </Form>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    email: state.auth.email,\n    applicantData: state.applicantDataReducer.applicantData\n})\n\nexport default connect(mapStateToProps, { getApplicantData, updateApplicantData })(ApplicantEdit);\n","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/actions/applicantActions.js",[],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/addJob.js",["145","146"],"import { Component } from \"react\";\nimport '../../App.css'\nimport { Link, Redirect } from 'react-router-dom'\nimport { Button, Form, FormGroup, Label, ListGroupItem} from 'reactstrap';\nimport axios from 'axios'\n\n\nclass AddJob extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            redirect: null,\n            title: '',\n            name: localStorage.getItem('name'),\n            email: localStorage.getItem('email'),\n            application_no: 0,\n            positions_no: 0,\n            deadline: null,\n            required_skill: [''],\n            type: 'Full-time',\n            duration: null,\n            salary: null,\n        }\n    }\n    handleSkillListChange = (index, event) => {\n        var required_skill = this.state.required_skill.slice(); // Make a copy of the emails first.\n        required_skill[index] = event.target.value; // Update it with the modified email.\n        this.setState({required_skill: required_skill}); // Update the state.\n    }\n    addNewSkill = () => {\n        this.setState({\n            required_skill: this.state.required_skill.concat('')\n        })\n    }\n    deleteSkill = (name) => {\n        this.setState({\n            required_skill: this.state.required_skill.filter(function(person) { \n            return person !== name \n        })});\n    }\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n    \n    addJob = () => {\n        var updatedData = {\n            title: this.state.title,\n            name: this.state.name,\n            required_skill: this.state.required_skill,\n            email: this.state.email,\n            application_no: this.state.application_no,\n            positions_no: this.state.positions_no,\n            deadline: this.state.deadline,\n            type: this.state.type,\n            duration: this.state.duration,\n            salary: this.state.salary\n        }\n        const { title, name, email, application_no, positions_no, deadline, required_skill, type, duration, salary } = updatedData\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const body = JSON.stringify({ title, name, email, application_no, positions_no, deadline, required_skill, type, duration, salary } )\n        console.log(`${body}`)\n        axios.post('/api/jobspost/', body, config)\n            .then( res => ({\n            })   \n            )\n            .catch(err => {\n                console.log(err.response);\n                alert('An error occurred! Try submitting the form again.');\n            });\n        this.setState({\n            redirect: \"/\"\n        })\n    }\n    \n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div className = \"box\">\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                    <Form>\n                        <FormGroup>\n                            <Label>Title:</Label>\n                            <input className=\"form-control\" type=\"title\" name=\"title\" id=\"title\" placeholder=\"Title\" onChange={this.onChange}></input>\n                            <Label>Name:</Label>\n                            <h2>{this.state.name}</h2>\n                            <Label>Email:</Label>\n                            <h2>{this.state.email}</h2>\n                            <Label>Max Applications:</Label>\n                            <input className=\"form-control\" type=\"number\" name=\"application_no\" id=\"application_no\" placeholder=\"Number of Application\" onChange={this.onChange}></input>\n                            <Label>Max positions:</Label>\n                            <input className=\"form-control\" type=\"number\" name=\"positions_no\" id=\"positions_no\" placeholder=\"Number of Positions\" onChange={this.onChange}></input>\n                            <Label>Deadline</Label>\n                            <input className=\"form-control\" type=\"date\" name=\"deadline\" id=\"deadline\" placeholder=\"Deadline of Application\" onChange={this.onChange}></input>\n                            <Label>Required Skills:</Label>\n                            { this.state.required_skill != null ? this.state.required_skill.map((name, index) => (\n                                <div key={index} className=\"input-group\">\n                                    <Button className= \"remove-btn\" color=\"danger\" size=\"sm\" onClick = {this.deleteSkill.bind(this, name)}>&times;</Button>\n                                    <input type=\"text\"\n                                        className=\"form-control\"\n                                        onChange={this.handleSkillListChange.bind(this, index)} value={name}/>\n                                </div>\n                            ))\n                            : null}\n                            <Button block onClick={this.addNewSkill}>Add skill</Button>\n                            <Label>Type of Job</Label><br/>\n                            <select name=\"type\" onChange={this.onChange} >\n                                <option value=\"Full-time\" selected >Full-time</option>\n                                <option value=\"Part-time\" >Part-time</option>\n                                <option value=\"Work-from-home\" >Work from Home</option>\n                            </select><br/>\n                            <Label>Duration</Label>\n                            <input className=\"form-control\" type=\"number\" name=\"duration\" id=\"duration\" placeholder=\"Duration\" onChange={this.onChange}></input>\n                            <Label>Salary</Label>\n                            <input className=\"form-control\" type=\"number\" name=\"salary\" id=\"salary\" placeholder=\"Salary in Rupees\" onChange={this.onChange}></input>\n                            <Button block onClick={this.addJob}>Submit</Button>\n                        </FormGroup>\n                    </Form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddJob","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/viewJob.js",["147","148","149","150","151","152","153","154"],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/editJobModal.js",["155","156"],"import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\nimport axios from 'axios'\n\n\nclass EditJobModal extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            email: localStorage.getItem('email'),\n            job: props.job,\n            modal: true,\n            application_no: this.props.job.application_no,\n            positions_no: this.props.job.positions_no,\n            deadline: this.props.job.deadline,\n            redirect: null\n        }\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = async(e) => {\n        e.preventDefault()\n\n        const update = { application_no: this.state.application_no, positions_no:this.state.positions_no, deadline:this.state.deadline };\n        const togeather = { _id: this.state.job._id, update: update }\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const body = JSON.stringify({ togeather })\n        console.log(`${body}`)\n        await axios.post('/api/viewJobs/editJob/', body, config)\n            .then( res => {\n                console.log(\"successfully updated\")\n            })\n            .catch(err => {\n                console.log(err.response);\n                alert('An error occurred! Try submitting the form again.');\n            });\n        this.setState({\n            redirect: '/'\n        })\n    }\n\n    render(){\n        if (this.state.redirect) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                <Modal\n                    centered = {true}\n                    isOpen = {this.state.modal}\n                    toggle = {this.toggle}>\n                    <ModalHeader toggl={this.toggle}>Update Job</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label style={{marginBottom: '0.5rem'}}>\n                                    Maximum number of applications:\n                                </Label>\n                                <Input style={{marginBottom: '1rem'}} type=\"number\" name=\"application_no\" id=\"application_no\" value={this.state.application_no} onChange={this.onChange}>\n                                </Input>\n                                <Label style={{marginBottom: '0.5rem'}}>\n                                    Maximum number of positions:\n                                </Label>\n                                <Input style={{marginBottom: '1rem'}} type=\"number\" name=\"positions_no\" id=\"positions_no\" value={this.state.positions_no} onChange={this.onChange}>\n                                </Input>\n                                <Label style={{marginBottom: '0.5rem'}}>\n                                    Deadline for application:\n                                </Label>\n                                <Input style={{marginBottom: '1rem'}} type=\"date\" name=\"deadline\" id=\"deadline\" value={moment(this.state.deadline).format(\"YYYY-MM-DD\")} onChange={this.onChange}></Input>\n                                <Button color=\"dark\" style={{marginTop: '2rem'}} block>Update</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\n\nexport default EditJobModal","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/addSopApply.js",["157","158","159","160","161","162","163","164"],"import axios from \"axios\";\nimport { Component, useState } from \"react\";\nimport { Button, Label, ListGroup, ListGroupItem, Form } from \"reactstrap\";\nimport '../../App.css'\nimport { Link, Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\nfunction AddSopApply(props){\n    const [job, setJob] = useState(props.job);\n    const [Sop, setSop] = useState('');\n    const [application_ID, setApplication_id] = useState(null);\n    const [redirect, setRedirect] = useState(null);\n\n    const applyForJob = async () => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        console.log(`${job.title}`)\n        const jobapplication = {\n            job_id: job._id,\n            job_title: job.title,\n            applicant_name: localStorage.getItem('name'),\n            applicant_email: localStorage.getItem('email'),\n            recruiter_name: job.name,\n            recruiter_email: job.email,\n            sop: Sop,\n            status: 'Applied'\n        }\n        var idOfTheApplication\n        const { job_id ,job_title ,applicant_name ,applicant_email ,recruiter_name ,recruiter_email , date_of_posting, sop, status } = jobapplication\n        var body = JSON.stringify({job_id ,job_title ,applicant_name ,applicant_email ,recruiter_name ,recruiter_email , date_of_posting, sop, status})\n        await axios.post('/api/applicantJob/postApplication/', body, config)\n            .then( res=> {\n                setApplication_id(res.data.applicationData._id)\n                idOfTheApplication = res.data.applicationData._id\n                console.log(`${application_ID}`)\n            } )\n            .catch( err=> {\n                console.log(`${err}`)\n            })\n        var job_applicants = job.pending_applicants;\n        job_applicants = job_applicants.concat([[ idOfTheApplication ,localStorage.getItem('email'), localStorage.getItem('name')]])\n        const update = { pending_applicants: job_applicants }\n        const together = { _id: job._id, update: update }\n        body =  JSON.stringify({together})\n        await axios.post('api/applicantJob/updateJobData/', body, config)\n            .then( res => {\n                console.log(`${res.data.updatedJob}`)\n            } )\n            .catch(\n                err => {\n                    console.log(`${err}`)\n                }\n            )\n        await props.reload()\n    }\n\n    const handleSopChange = (e) => {\n        setSop(e.target.value);\n    }\n\n    if(redirect){\n        return <Redirect to={redirect} />\n    }\n    console.log('lollmaolol')\n    return (\n            <div className = \"box\">\n                <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n                    <Form>\n                        <h3>Applying for {job.title} at {job.name}</h3>\n                        <br/><br/>\n                        <h3>Enter Sop:</h3>\n                        <textarea class=\"form-control\" type=\"textarea\" \n                            onChange={handleSopChange}\n                            /><br/>\n                        <center>\n                            <Button style={{backgroundColor: \"green\", marginRight:'100px'}} onClick={applyForJob}>Apply</Button>\n                            <Button style={{backgroundColor: \"red\"}} onClick={props.reload}>Cancel</Button>\n                        </center>\n                    </Form>\n                </div>\n            </div>\n        )\n}\n\n// class AddSopApply extends Component {\n\n//     constructor(props){\n//         super(props);\n//         this.state = {\n//             job: this.props.location.state.job,\n//             sop: '',\n//             jobApplicationID: null,\n//             redirect: null\n//         }\n//     }\n\n//     applyForJob = async () => {\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         }\n//         const jobapplication = {\n//             job_id: this.state.job._id,\n//             job_title: this.state.job.title,\n//             applicant_name: localStorage.getItem('name'),\n//             applicant_email: localStorage.getItem('email'),\n//             recruiter_name: this.state.job.name,\n//             recruiter_email: this.state.job.email,\n//             sop: this.state.sop,\n//             status: 'Applied'\n//         }\n//         const { job_id ,job_title ,applicant_name ,applicant_email ,recruiter_name ,recruiter_email , date_of_posting, sop, status } = jobapplication\n//         var body = JSON.stringify({job_id ,job_title ,applicant_name ,applicant_email ,recruiter_name ,recruiter_email , date_of_posting, sop, status})\n//         await axios.post('/api/applicantJob/postApplication/', body, config)\n//             .then( res=> {\n//                 this.setState({\n//                     jobApplicationID: res.data.applicationData._id\n//                 })\n//             } )\n//             .catch( err=> {\n//                 console.log(`${err}`)\n//             })\n//         var job_applicants = this.state.job.pending_applicants;\n//         job_applicants = job_applicants.concat([[ this.state.jobApplicationID ,localStorage.getItem('email'), localStorage.getItem('name')]])\n//         const update = { pending_applicants: job_applicants }\n//         const together = { _id: this.state.job._id, update: update }\n//         body =  JSON.stringify({together})\n//         await axios.post('api/applicantJob/updateJobData/', body, config)\n//             .then( res => {\n//                 console.log(`${res.data.updatedJob}`)\n//             } )\n//             .catch(\n//                 err => {\n//                     console.log(`${err}`)\n//                 }\n//             )\n//         this.setState({\n//             redirect: '/'\n//         })\n//     }\n\n//     onChange = (e) => {\n//         this.setState({ [e.target.name]: e.target.value });\n//     }\n\n//     render() {\n//         if (this.state.redirect) {\n//             return <Redirect to={this.state.redirect} />\n//         }\n//         return (\n//             <div className = \"box\">\n//                 <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n//                     <Form>\n//                         <h3>Applying for {this.state.job.title} at {this.state.job.name}</h3>\n//                         <br/><br/>\n//                         <h3>Enter Sop:</h3>\n//                         <textarea class=\"form-control\" type=\"textarea\" \n//                             name=\"sop\" id=\"sop\"\n//                             onChange={this.onChange\n//                             }\n//                             value={this.state.sop}\n//                             /><br/>\n//                         <Button style={{backgroundColor: \"green\"}} onClick={this.applyForJob}>Apply</Button>\n//                     </Form>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\nexport default AddSopApply","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/myApplications.js",["165","166","167"],"/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterApplicationView.js",["168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import { Component, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Button, Label, ListGroup, ListGroupItem } from 'reactstrap'\nimport moment from 'moment'\n\nfunction RecruiterApplicationView (props){\n    const [ job, setJob ] = useState(props.location.state.job)\n    const [ jobApplications, setJobApplications ] = useState(null)\n    const [ jobApplicationsDefault, setJobApplicationsDefault ] = useState(null)\n    const [ users, setUsers ] = useState(null)\n    const [ sortOrder, setSortOrder ] = useState('ascending')\n    const [ sortAttribute, setSortAttribute ] = useState('name')\n\n    useEffect( async () => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const data = { _id: job._id }\n        var body = JSON.stringify(data)\n        await axios.post('/api/recruiterApplication/getJobApplications/', body, config)\n            .then(\n                res => {\n                    setJobApplications(res.data.applications)\n                    setJobApplicationsDefault(res.data.applications)\n                }\n            )\n        const condition = { role: 'Applicant' }\n        body = JSON.stringify(condition)\n        await axios.get('/api/recruiterApplication/getUsers/')\n                .then(\n                    res => {\n                        setUsers(res.data.profiles)\n                    }\n                )\n    }, []);\n    \n    const sortArray = (type, order) => {\n        const types = {\n          name: 'applicant_name',\n          date_of_posting: 'date_of_posting',\n          rating: 'rating_sum',\n        };\n        const sortProperty = types[type];\n        var sorted;\n        console.log(`${sortProperty}`)\n        if(sortProperty === 'rating_sum'){\n            sorted = [...jobApplications].sort((a, b) => {\n                const b_user = [...users].find((user) => user.email == b.applicant_email)\n                const a_user = [...users].find((user) => user.email == a.applicant_email)\n                return b_user.rating/b_user.total_rating - a_user.rating/a_user.total_rating\n            });\n        }else{\n            sorted = [...jobApplications].sort((a, b) => {\n                return b[sortProperty]-a[sortProperty]});\n        }\n        setSortAttribute(sortProperty)\n        if(order === 'descending'){\n            setJobApplications(sorted);\n        }else{\n            setJobApplications(sorted.concat().reverse());\n        }\n    };\n\n    const changeSortOrder = (order) => {\n        setSortOrder(order)\n        sortArray(sortAttribute, order)\n    }\n    \n    const shortListJob = (application) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const update = { status: 'Shortlisted' }\n        const together = { _id: application._id, update: update }\n        const body = JSON.stringify({ together })\n        console.log(`${body}`)\n        axios.post('/api/recruiterApplication/updateApplicationStatus', body, config)\n            .then(\n                res => {\n                    console.log(res.data.data)\n                }\n            )\n        var updatedApplicaitons = [...jobApplications]\n        const index = updatedApplicaitons.indexOf(application)\n        if(index != -1){\n            updatedApplicaitons[index].status='Shortlisted'\n            setJobApplications(updatedApplicaitons)\n            setJobApplicationsDefault(updatedApplicaitons)\n        }\n    }\n\n    const rejectJob = async (application, jobData) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        var update = { status: 'Rejected' }\n        var together = { _id: application._id, update: update }\n        var body = JSON.stringify({ together })\n        console.log(`${body}`)\n        await axios.post('/api/recruiterApplication/updateApplicationStatus', body, config)\n            .then(\n                res => {\n                    console.log(res.data.data)\n                }\n            )\n        const dataToBeDeleted = jobData.pending_applicants.find(data => data[1] === application.applicant_email)\n        var newData = [...jobData.pending_applicants]\n        var index = jobData.pending_applicants.indexOf(dataToBeDeleted)\n        if(index != -1){\n            newData.splice(index, 1)\n        }\n        update = { pending_applicants: newData }\n        together = { _id: jobData._id, update: update }\n        body = JSON.stringify( { together } )\n        await axios.post('/api/recruiterApplication/removePendingApplicant', body , config)\n            .then(\n                res => {\n                    console.log(res.data.data)\n                }\n            )\n        if(jobData === job)\n        {   \n            var updatedApplicaitons = [...jobApplications]\n            index = updatedApplicaitons.indexOf(application)\n            if(index != -1){\n                updatedApplicaitons[index].status='Rejected'\n                setJobApplications(updatedApplicaitons)\n                setJobApplicationsDefault(updatedApplicaitons)\n            }\n        }\n    }\n\n    const acceptApplicant = async (application) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        var update\n        var together\n        // var update = { status: 'Rejected' }\n        // var together = { applicant_email: application.applicant_email, update: update }\n        // var body = JSON.stringify({together})\n\n        // // Rejecting all pending applications of accepted applicants\n        // await axios.post('/api/recruiterApplication/rejectApplicationsofApplicant', body, config)\n        //     .then(\n        //         res => {\n        //             console.log(res.data.data)\n        //         }\n        //     )\n        const data = { email: application.applicant_email }\n        var body = JSON.stringify(data)\n        var applicant_applications\n        await axios.post('/api/applicantJob/getApplicantApplications/', body, config)\n            .then( res => {\n                applicant_applications = res.data.applications\n            })\n        var i\n        for(i = 0; i < applicant_applications.length; i++){\n            if(applicant_applications[i]!=application){\n                var jobData\n                update = { _id: applicant_applications[i].job_id }\n                body = JSON.stringify({update})\n                await axios.post('/api/recruiterApplication/getApplicantJob', body, config)\n                    .then(res => {\n                        jobData = res.data.jobdata\n                    })\n                await rejectJob(applicant_applications[i], jobData)\n            }\n        }\n        // Handling the data present in Job model\n        const dataToBeDeleted = job.pending_applicants.find(data => data[1] === application.applicant_email)\n        var pending_applicants = [...job.pending_applicants]\n        var index = job.pending_applicants.indexOf(dataToBeDeleted)\n        if(index != -1){\n            pending_applicants.splice(index, 1)\n        }\n        var accepted_applicants = [...job.accepted_applicants]\n        accepted_applicants = accepted_applicants.concat([dataToBeDeleted])\n        if(accepted_applicants.length >= job.positions_no){\n            // Rejecting all pending applications if the positions are full\n            var i\n            for(i = 0; i < jobApplications.length; i++){\n                if((jobApplications[i].status === \"Applied\" || jobApplications[i].status === \"Shortlisted\") && jobApplications[i]!=application){\n                    // update = { status: 'Rejected' }\n                    // together = { _id: jobApplications[i]._id, update: update }\n                    // body = JSON.stringify({ together })\n                    // console.log(`${body}`)\n                    // await axios.post('/api/recruiterApplication/updateApplicationStatus', body, config)\n                    //     .then(\n                    //         res => {\n                    //             console.log(res.data.data)\n                    //         }\n                    //     )\n                    rejectJob(jobApplications[i], job)\n                }\n            }\n        }\n\n        // Updating the job data\n        update = { accepted_applicants: accepted_applicants, pending_applicants: pending_applicants }\n        together = { _id: job._id, update: update }\n        body = JSON.stringify({together})\n        await axios.post('api/applicantJob/updateJobData/', body, config)\n            .then( res => {\n                console.log(`${res.data.updatedJob}`)\n            } )\n            .catch(\n                err => {\n                    console.log(`${err}`)\n                }\n            )\n\n        update = { status: 'Accepted', date_of_posting: moment().format() }\n        together = { _id: application._id, update: update }\n        body = JSON.stringify({together})\n\n        // Accepting the given applicant\n        await axios.post('/api/recruiterApplication/updateApplicationStatus/', body, config)\n            .then(\n                res => {\n                    console.log(res.data.data)\n                }\n            )\n        var updatedApplicaitons = [...jobApplications]\n        index = updatedApplicaitons.indexOf(application)\n        if(index != -1){\n            updatedApplicaitons[index].status='Accepted'\n            setJobApplications(updatedApplicaitons)\n            setJobApplicationsDefault(updatedApplicaitons)\n        }\n    }\n\n    return (\n        <div className=\"box\">\n            <center>\n                <div style={{marginTop:'30px'}}>\n                    <Label style={{marginInline:'6px'}}>Sort Options:</Label>\n                    <select onChange={(e) => sortArray(e.target.value, sortOrder)} style={{marginInline:'6px'}}>\n                        <option value=\"name\" >Name</option>\n                        <option value=\"date_of_posting\">Date of Application</option>\n                        <option value=\"rating\">Rating</option>\n                    </select>\n                    <select onChange={(e) => changeSortOrder(e.target.value)} style={{marginInline:'6px'}}>\n                        <option value=\"ascending\">Ascending</option>\n                        <option value=\"descending\">Descending</option>\n                    </select>\n                </div>\n                <div style={{marginTop:'30px', width:'70%'}}>\n                {\n                    jobApplications!=null && users!=null\n                        ?   jobApplications.map((application, index) => {\n                            return users.map((applicant_data, applicant_index) => {\n                                return application.applicant_email === applicant_data.email && application.status != \"Rejected\"\n                                    ? <div style={{backgroundColor:'white', marginBottom:'30px', padding: '20px'}} key={index}>\n                                        <Label>Name: {applicant_data.name}</Label><br/>\n                                        <Label>Skills: </Label>\n                                            { applicant_data.skills.map((data, index) => {\n                                                return <Label style={{marginInline:'5px', backgroundColor:'lightblue', padding:'6px'}}>{data!='' ? data : 'NotAvailable'}</Label>\n                                            }) }\n                                            <br/>\n                                        <Label>Date of Application: </Label>    \n                                        <Label style={{marginInline:'5px'}}>{moment(application.date_of_posting).format(\"YYYY-MM-DD\")}</Label>\n                                        <table>\n                                            <tr><th>Institution</th><th>Start Year</th><th>End Year</th></tr>\n                                            { applicant_data.education.map((edu, index) => {\n                                                return <tr>\n                                                    <td>\n                                                        {edu[0]!='' ? edu[0] : 'Not Available'}\n                                                    </td>\n                                                    <td>\n                                                        {edu[1]!='' ? edu[1] : 'Not Available'}\n                                                    </td>\n                                                    <td>\n                                                        {edu[2]!='' ? edu[2] : 'Not Available'}\n                                                    </td>\n                                                </tr>\n                                            }) }\n                                        </table><br/>\n                                        <Label style={{marginInline:'5px'}}>SOP: </Label>\n                                        <Label>{application.sop}</Label><br/>\n                                        <Label style={{marginInline:'5px'}}>Rating: </Label>\n                                        <Label>{ applicant_data.total_rating === 0 ? applicant_data.rating / applicant_data.total_rating : 0 }</Label><br/>\n                                        <Label style={{marginInline:'5px'}}>Application Status: </Label>\n                                        <Label>{application.status}</Label><br/>\n                                        { application.status === 'Applied' \n                                            ? <div>\n                                                <Button style={{color: 'lightgreen', backgroundColor:'white', marginInline:'3px'}} onClick={() => shortListJob(application)}>Shortlist</Button>\n                                                <Button style={{color: 'white', backgroundColor:'lightgreen', marginInline:'3px'}} onClick={() => acceptApplicant(application)}>Accept</Button>\n                                                <Button style={{color: 'white', backgroundColor:'red', marginInline:'3px'}} onClick={() => rejectJob(application, job)}>Reject</Button>\n                                            </div> \n                                            : null }\n                                        { application.status === 'Shortlisted' \n                                            ? <div>\n                                                <Button style={{color: 'white', backgroundColor:'lightgreen', marginInline:'3px'}} onClick={() => acceptApplicant(application)}>Accept</Button>\n                                                <Button style={{color: 'white', backgroundColor:'red', marginInline:'3px'}} onClick={() => rejectJob(application, job)}>Reject</Button>\n                                            </div> \n                                            : null }\n                                    </div>\n                                    : null\n                            })\n                        })\n                        : null\n                    }\n                </div>\n            </center>\n        </div>\n    )\n}\n\nexport default RecruiterApplicationView","/Users/samaykothari/Desktop/Academic/DASS/assignment1/frontend/job_application/src/components/screens/recruiterEmployees.js",["191","192","193","194","195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":9,"column":35,"nodeType":"203","messageId":"204","endLine":9,"endColumn":41},{"ruleId":"205","severity":1,"message":"206","line":9,"column":1,"nodeType":"207","endLine":28,"endColumn":2},{"ruleId":"205","severity":1,"message":"206","line":12,"column":1,"nodeType":"207","endLine":60,"endColumn":2},{"ruleId":"201","severity":1,"message":"208","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":25},{"ruleId":"201","severity":1,"message":"209","line":7,"column":5,"nodeType":"203","messageId":"204","endLine":7,"endColumn":15},{"ruleId":"201","severity":1,"message":"210","line":9,"column":5,"nodeType":"203","messageId":"204","endLine":9,"endColumn":12},{"ruleId":"211","severity":1,"message":"212","line":77,"column":17,"nodeType":"213","messageId":"214","endLine":77,"endColumn":19},{"ruleId":"201","severity":1,"message":"215","line":15,"column":34,"nodeType":"203","messageId":"204","endLine":15,"endColumn":38},{"ruleId":"201","severity":1,"message":"216","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":19},{"ruleId":"201","severity":1,"message":"217","line":3,"column":18,"nodeType":"203","messageId":"204","endLine":3,"endColumn":27},{"ruleId":"201","severity":1,"message":"218","line":3,"column":29,"nodeType":"203","messageId":"204","endLine":3,"endColumn":42},{"ruleId":"219","severity":1,"message":"220","line":235,"column":45,"nodeType":"221","messageId":"222","endLine":271,"endColumn":46},{"ruleId":"211","severity":1,"message":"223","line":240,"column":106,"nodeType":"213","messageId":"214","endLine":240,"endColumn":108},{"ruleId":"211","severity":1,"message":"223","line":240,"column":133,"nodeType":"213","messageId":"214","endLine":240,"endColumn":135},{"ruleId":"211","severity":1,"message":"223","line":244,"column":92,"nodeType":"213","messageId":"214","endLine":244,"endColumn":94},{"ruleId":"211","severity":1,"message":"223","line":256,"column":88,"nodeType":"213","messageId":"214","endLine":256,"endColumn":90},{"ruleId":"205","severity":1,"message":"206","line":9,"column":1,"nodeType":"207","endLine":54,"endColumn":2},{"ruleId":"201","severity":1,"message":"218","line":6,"column":42,"nodeType":"203","messageId":"204","endLine":6,"endColumn":55},{"ruleId":"201","severity":1,"message":"208","line":7,"column":10,"nodeType":"203","messageId":"204","endLine":7,"endColumn":25},{"ruleId":"201","severity":1,"message":"224","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":14},{"ruleId":"201","severity":1,"message":"218","line":4,"column":42,"nodeType":"203","messageId":"204","endLine":4,"endColumn":55},{"ruleId":"201","severity":1,"message":"225","line":3,"column":16,"nodeType":"203","messageId":"204","endLine":3,"endColumn":24},{"ruleId":"201","severity":1,"message":"226","line":4,"column":31,"nodeType":"203","messageId":"204","endLine":4,"endColumn":40},{"ruleId":"201","severity":1,"message":"218","line":4,"column":42,"nodeType":"203","messageId":"204","endLine":4,"endColumn":55},{"ruleId":"201","severity":1,"message":"217","line":4,"column":57,"nodeType":"203","messageId":"204","endLine":4,"endColumn":66},{"ruleId":"201","severity":1,"message":"227","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},{"ruleId":"201","severity":1,"message":"228","line":73,"column":21,"nodeType":"203","messageId":"204","endLine":73,"endColumn":36},{"ruleId":"229","severity":1,"message":"230","line":83,"column":13,"nodeType":"203","messageId":"231","endLine":83,"endColumn":19},{"ruleId":"211","severity":1,"message":"223","line":91,"column":17,"nodeType":"213","messageId":"214","endLine":91,"endColumn":19},{"ruleId":"201","severity":1,"message":"210","line":11,"column":5,"nodeType":"203","messageId":"204","endLine":11,"endColumn":12},{"ruleId":"201","severity":1,"message":"232","line":12,"column":5,"nodeType":"203","messageId":"204","endLine":12,"endColumn":10},{"ruleId":"201","severity":1,"message":"216","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":19},{"ruleId":"201","severity":1,"message":"233","line":3,"column":18,"nodeType":"203","messageId":"204","endLine":3,"endColumn":23},{"ruleId":"201","severity":1,"message":"217","line":3,"column":25,"nodeType":"203","messageId":"204","endLine":3,"endColumn":34},{"ruleId":"201","severity":1,"message":"218","line":3,"column":36,"nodeType":"203","messageId":"204","endLine":3,"endColumn":49},{"ruleId":"201","severity":1,"message":"224","line":5,"column":10,"nodeType":"203","messageId":"204","endLine":5,"endColumn":14},{"ruleId":"201","severity":1,"message":"227","line":6,"column":8,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},{"ruleId":"201","severity":1,"message":"234","line":9,"column":17,"nodeType":"203","messageId":"204","endLine":9,"endColumn":23},{"ruleId":"201","severity":1,"message":"235","line":12,"column":22,"nodeType":"203","messageId":"204","endLine":12,"endColumn":33},{"ruleId":"201","severity":1,"message":"216","line":1,"column":10,"nodeType":"203","messageId":"204","endLine":1,"endColumn":19},{"ruleId":"201","severity":1,"message":"236","line":7,"column":22,"nodeType":"203","messageId":"204","endLine":7,"endColumn":32},{"ruleId":"211","severity":1,"message":"223","line":22,"column":20,"nodeType":"213","messageId":"214","endLine":22,"endColumn":22},{"ruleId":"201","severity":1,"message":"216","line":1,"column":10,"nodeType":"203","messageId":"204","endLine":1,"endColumn":19},{"ruleId":"201","severity":1,"message":"217","line":3,"column":25,"nodeType":"203","messageId":"204","endLine":3,"endColumn":34},{"ruleId":"201","severity":1,"message":"218","line":3,"column":36,"nodeType":"203","messageId":"204","endLine":3,"endColumn":49},{"ruleId":"201","severity":1,"message":"234","line":7,"column":18,"nodeType":"203","messageId":"204","endLine":7,"endColumn":24},{"ruleId":"201","severity":1,"message":"237","line":9,"column":13,"nodeType":"203","messageId":"204","endLine":9,"endColumn":35},{"ruleId":"238","severity":1,"message":"239","line":14,"column":16,"nodeType":"240","endLine":37,"endColumn":6},{"ruleId":"238","severity":1,"message":"241","line":37,"column":8,"nodeType":"242","endLine":37,"endColumn":10,"suggestions":"243"},{"ruleId":"211","severity":1,"message":"212","line":50,"column":69,"nodeType":"213","messageId":"214","endLine":50,"endColumn":71},{"ruleId":"211","severity":1,"message":"212","line":51,"column":69,"nodeType":"213","messageId":"214","endLine":51,"endColumn":71},{"ruleId":"211","severity":1,"message":"223","line":89,"column":18,"nodeType":"213","messageId":"214","endLine":89,"endColumn":20},{"ruleId":"211","severity":1,"message":"223","line":115,"column":18,"nodeType":"213","messageId":"214","endLine":115,"endColumn":20},{"ruleId":"211","severity":1,"message":"223","line":131,"column":22,"nodeType":"213","messageId":"214","endLine":131,"endColumn":24},{"ruleId":"211","severity":1,"message":"223","line":167,"column":41,"nodeType":"213","messageId":"214","endLine":167,"endColumn":43},{"ruleId":"244","severity":1,"message":"245","line":172,"column":27,"nodeType":"240","messageId":"246","endLine":174,"endColumn":22},{"ruleId":"211","severity":1,"message":"223","line":182,"column":18,"nodeType":"213","messageId":"214","endLine":182,"endColumn":20},{"ruleId":"229","severity":1,"message":"247","line":189,"column":17,"nodeType":"203","messageId":"231","endLine":189,"endColumn":18},{"ruleId":"211","severity":1,"message":"223","line":191,"column":130,"nodeType":"213","messageId":"214","endLine":191,"endColumn":132},{"ruleId":"211","severity":1,"message":"223","line":234,"column":18,"nodeType":"213","messageId":"214","endLine":234,"endColumn":20},{"ruleId":"211","severity":1,"message":"223","line":261,"column":115,"nodeType":"213","messageId":"214","endLine":261,"endColumn":117},{"ruleId":"211","severity":1,"message":"223","line":266,"column":141,"nodeType":"213","messageId":"214","endLine":266,"endColumn":143},{"ruleId":"211","severity":1,"message":"223","line":276,"column":64,"nodeType":"213","messageId":"214","endLine":276,"endColumn":66},{"ruleId":"211","severity":1,"message":"223","line":279,"column":64,"nodeType":"213","messageId":"214","endLine":279,"endColumn":66},{"ruleId":"211","severity":1,"message":"223","line":282,"column":64,"nodeType":"213","messageId":"214","endLine":282,"endColumn":66},{"ruleId":"201","severity":1,"message":"216","line":1,"column":10,"nodeType":"203","messageId":"204","endLine":1,"endColumn":19},{"ruleId":"201","severity":1,"message":"248","line":3,"column":10,"nodeType":"203","messageId":"204","endLine":3,"endColumn":16},{"ruleId":"201","severity":1,"message":"217","line":3,"column":25,"nodeType":"203","messageId":"204","endLine":3,"endColumn":34},{"ruleId":"201","severity":1,"message":"218","line":3,"column":36,"nodeType":"203","messageId":"204","endLine":3,"endColumn":49},{"ruleId":"238","severity":1,"message":"239","line":13,"column":16,"nodeType":"240","endLine":33,"endColumn":6},{"ruleId":"211","severity":1,"message":"223","line":70,"column":20,"nodeType":"213","messageId":"214","endLine":70,"endColumn":22},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'combineReducers' is defined but never used.","'AUTH_ERROR' is defined but never used.","'NavLink' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'user' is assigned a value but never used.","'Component' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '!==' and instead saw '!='.","'Link' is defined but never used.","'Redirect' is defined but never used.","'FormGroup' is defined but never used.","'moment' is defined but never used.","'jobApplications' is assigned a value but never used.","no-redeclare","'filter' is already defined.","redeclared","'Alert' is defined but never used.","'Label' is defined but never used.","'setJob' is assigned a value but never used.","'setRedirect' is assigned a value but never used.","'setAllJobs' is assigned a value but never used.","'jobApplicationsDefault' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'job._id'. Either include it or remove the dependency array.","ArrayExpression",["251"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'jobData'.","unsafeRefs","'i' is already defined.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},"Update the dependencies array to be: [job._id]",{"range":"254","text":"255"},[1438,1440],"[job._id]"]